AWSTemplateFormatVersion: '2010-09-09'
Resources:
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
      - Fn::ImportValue: Subnet1
      - Fn::ImportValue: Subnet2
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: 30
      SecurityGroups:
      - Fn::ImportValue: ECSSecurityGroup
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: TargetGroup
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'TargetGroup'
      LoadBalancerArn: !Ref 'ALB'
      Port: '80'
      Protocol: HTTP
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-499
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: VPC
  ECSSecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::ImportValue: ECSSecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0
Outputs:
  TargetGroup:
    Value: !Ref 'TargetGroup'
    Export:
      Name: default-tg
  ALBListener:
    Value: !Ref 'ALBListener'
    Export:
      Name: ALBListener
  DNSName:
    Value:
      Fn::GetAtt:
      - ALB
      - DNSName
    Export:
      Name: DNSName